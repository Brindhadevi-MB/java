import java.util.*;


public class Main {
    public static void main(String[] args) throws Throwable {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        LinkedList llist= new LinkedList(); 
        int a1=sc.nextInt();
        Node head= new Node(a1);
        llist.addToTheLast(head);
        for (int i = 1; i < n; i++) 
        {
            int a = sc.nextInt(); 
            llist.addToTheLast(new Node(a));
        }
            
        Solution A = new Solution();
        boolean ispalindrome=A.checkLinkedListPalindrome(llist.head);
        if(ispalindrome){
            System.out.println("YES");
        }
        else{
            System.out.println("NO");
        }
        
    }
}

class Node
    {
        int data;
        Node next;
        Node(int d) {data = d; next = null; }
    }
    
class LinkedList
{
    Node head;  
    Node tail;
    public void addToTheLast(Node node) 
    {
      if (head == null) 
      {
       head = node;
       tail = node;
      } 
      else 
      {
       tail.next = node;
       tail = node;
      }
    }
      void printList()
    {
        Node temp = head;
        while (temp != null)
        {
           System.out.print(temp.data+" ");
           temp = temp.next;
        }  
        System.out.println();
    }
    
}

class Solution
{
 boolean checkLinkedListPalindrome(Node head)
    {
       if(head==null||head.next==null){
         return true;
       } 
       Node slow=head;
       Node fast=head;
       while(fast!=null&&fast.next!=null){
           slow=slow.next;
           fast=fast.next.next;
       }
       Node prev=null;
       Node curr=slow;
       while(curr!=null){
           Node nextNode=curr.next;
           curr.next=prev;
           prev=curr;
           curr=nextNode;
       }
       Node firstHalf=head;
       Node secondHalf=prev;
       while(secondHalf!=null){
           if(firstHalf.data!=secondHalf.data){
             return false;
           }
           firstHalf=firstHalf.next;
           secondHalf=secondHalf.next;
       }
     return true;
 
    }
   
    
}
